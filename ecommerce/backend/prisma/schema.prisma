generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuário
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  avatarUrl String?
  isActive  Boolean   @default(true)
  role      String    @default("customer")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  cartItems CartItem[]
}

// Produto
model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  sku         String      @unique
  stock       Int
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      ProductImage[]
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// Categoria
model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

// Imagens do produto
model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

// Carrinho (item do carrinho)
model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

// Pedido
model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime    @default(now())
  status     String      @default("pending")
  total      Float
  address    Address?    @relation(fields: [addressId], references: [id])
  addressId  String?
  items      OrderItem[]
  payment    Payment?
}

// Item do pedido
model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

// Endereço
model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  number    String
  city      String
  state     String
  zip       String
  country   String
  orders    Order[]
}

// Avaliação de produto
model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

// Pagamento
model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  method    String
  status    String
  paidAt    DateTime?
}